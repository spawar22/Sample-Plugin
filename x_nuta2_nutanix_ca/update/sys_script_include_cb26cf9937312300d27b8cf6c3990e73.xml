<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_nuta2_nutanix_ca.Run_App_Actions</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description>Run app actions on click</description>
        <name>Run_App_Actions</name>
        <script><![CDATA[var Run_App_Actions = Class.create();
Run_App_Actions.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {

    runAction: function() {
        try {
            this.utils = new Nutanix_Calm_Utils();
            this.logger = new Nutanix_Calm_Logger();
            this.logger.info("Inside Run_App_Actions().runAction()");
            var message = '';
            var runlogResp = ' ';
            var actSysid = this.getParameter('sysparm_actionsysid') + '';

            /*var patt = new RegExp(/[0-9a-f]{32}/);
            	if(actSysid!= null && patt.test(actSysid))
            		actSysid = actSysid.toString();
            	else return;*/
            var app_config = new GlideRecord('x_nuta2_nutanix_ca_calm_plugin_configuration');
            if (app_config.get(gs.getProperty('x_nuta2_nutanix_ca.nutanix.application.properties.sys_id'))) {
                var modActVars = this.getParameter('sysparm_actionVars') + '';
            }

            var action = new GlideRecord('x_nuta2_nutanix_ca_nutanix_calm_action');
            if (action.get(actSysid)) {

                var app = new GlideRecord('x_nuta2_nutanix_ca_nutanix_calm_application');
                app.addQuery('name', action.parent_name);
                app.addQuery('uuid', action.parent_uuid);
                app.query();
                app.next();
            }


            var gr = new GlideRecord(this.utils.configuration.table.ActionWorkflowStaging);
            gr.initialize();
            gr.setValue('actionsysid', actSysid);
            gr.setValue('user_name', gs.getUserID());
            gr.action_json = modActVars;
            gr.setValue('application', app.sys_id);
            if (app_config.actions_approval_workflow) {
                if (action.type == 'system' && app_config.system_actions) {
                    gr.setValue('approval_status', 'waiting_for_approval');
                    message = action.action_name + ' action on ' + app.name + ' application is in waiting for approval state';
                }
                if (action.type == 'user' && app_config.user_actions) {
                    gr.setValue('approval_status', 'waiting_for_approval');
                    message = action.action_name + ' action on ' + app.name + ' application is in waiting for approval state';
                }
                if (message == '') {
                    message = action.action_name + ' action has started.';
                }
            } else {
                message = action.action_name + ' action has started.';
                gr.setValue('approval_status', 'not_required');
            }
            gr.insert();
            return message;

        } catch (e) {
            this.logger.error("Application action failed: " + e);
        }
    },

    fetchAppOriginalBlueprint: function() {
        var logger = new Nutanix_Calm_Logger();

        try {
            logger.info("Inside Run_App_Actions().fetchAppOriginalBlueprint()");

            var actSysid = this.getParameter('sysparm_actionsysid');
            var act_utils = new Nutanix_Action_Utils();

            return act_utils.app_update_blueprint_call(actSysid);

        } catch (e) {
            logger.error("Failed fetching app blueprint: " + e);
        }
    },

    appBlueprintValidateCall: function() {
        var logger = new Nutanix_Calm_Logger();

        try {
            logger.info("Inside Run_App_Actions().appBlueprintValidateCall()");

            var actSysid = this.getParameter('sysparm_actionsysid');
            var modified_bp = this.getParameter('sysparm_modBp');
            var act_utils = new Nutanix_Action_Utils();

            return act_utils.app_blueprint_validate_call(actSysid, modified_bp);

        } catch (e) {
            logger.error("Error in appBlueprintValidateCall blueprint: " + e);
        }
    },

    updateAppBlueprint: function() {
        var logger = new Nutanix_Calm_Logger();

        try {
            logger.info("Inside Run_App_Actions().appBlueprintValidateCall()");

            var actSysid = this.getParameter('sysparm_actionsysid');
            var modified_bp = this.getParameter('sysparm_modBp');
            var act_utils = new Nutanix_Action_Utils();

            return act_utils.update_app_blueprint(actSysid, modified_bp);

        } catch (e) {
            logger.error("Error in updateAppBlueprint: " + e);
        }
    },

    getOsTypeSingleVM: function() {
        var logger = new Nutanix_Calm_Logger();

        try {
            logger.info("Inside Run_App_Actions().getOsTypeSingleVM()");

            var actSysid = this.getParameter('sysparm_actionsysid');
            var act_utils = new Nutanix_Action_Utils();

            return act_utils.get_os_type_singleVM(actSysid);

        } catch (e) {
            logger.error("Error in getOsTypeSingleVM: " + e);
        }
    },

    getProviderTypeSingleVM: function() {
        var logger = new Nutanix_Calm_Logger();

        try {
            logger.info("Inside Run_App_Actions().getProviderTypeSingleVM()");

            var actSysid = this.getParameter('sysparm_actionsysid');
            var sysIdType = this.getParameter('sysparm_sysid_type');
            var act_utils = new Nutanix_Action_Utils();

            return act_utils.get_provider_type_singleVM(actSysid, sysIdType);

        } catch (e) {
            logger.error("Error in getProviderTypeSingleVM: " + e);
        }
    },

    applicationNameExist: function() {
        var logger = new Nutanix_Calm_Logger();
        try {
            logger.info("Inside Run_App_Actions().applicationNameExist()");

            var application_name = this.getParameter('sysparm_applicationName');
            var application = new GlideRecord('x_nuta2_nutanix_ca_nutanix_calm_application');
            application.addQuery('name', application_name + '');
            application.query();

            if (application.next())
                return true;
            else
                return false;

        } catch (e) {
            logger.error("Error in applicationNameExist: " + e);
        }
    },
	
	getDiskList: function() {
		
		var logger = new Nutanix_Calm_Logger();

        try {
            logger.info("Inside Run_App_Actions().getOsTypeSingleVM()");

			var app_uuid = this.getParameter('sysparm_appuuid');
            var act_utils = new Nutanix_Action_Utils();

            return act_utils.get_disk_list(app_uuid);

        } catch (e) {
            logger.error("Error in getOsTypeSingleVM: " + e);
        }
	}
	,
    type: 'Run_App_Actions'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>bharat.vajj</sys_created_by>
        <sys_created_on>2018-11-15 06:19:34</sys_created_on>
        <sys_id>cb26cf9937312300d27b8cf6c3990e73</sys_id>
        <sys_mod_count>182</sys_mod_count>
        <sys_name>Run_App_Actions</sys_name>
        <sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope>
        <sys_update_name>sys_script_include_cb26cf9937312300d27b8cf6c3990e73</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-08-04 04:58:15</sys_updated_on>
    </sys_script_include>
</record_update>
