<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_transform_map">
    <sys_transform_map action="INSERT_OR_UPDATE">
        <active>true</active>
        <copy_empty_fields>false</copy_empty_fields>
        <create_new_record_on_empty_coalesce_fields>false</create_new_record_on_empty_coalesce_fields>
        <enforce_mandatory_fields>No</enforce_mandatory_fields>
        <name>VMware Providers</name>
        <order>100</order>
        <run_business_rules>false</run_business_rules>
        <run_script>true</run_script>
        <script><![CDATA[(function transformRow(source, target, map, log, isUpdate) {

	this.appUtil = new Nutanix_Calm_Utils();
	this.logger = new Nutanix_Calm_Logger();
	target.environment = source.environment;
	if(source.login_credential_local_reference){

		var credJSON = JSON.parse(source.login_credential_local_reference);
		var credUUID = credJSON.uuid;
		
		var gr = new GlideRecord(this.appUtil.configuration.table.Credentials+"");
		gr.addQuery("uuid",credUUID);							
		gr.query();
		if(gr.next()){
			//gs.error(" uuid " + gr);
			target.credential = gr.sys_id;
		}
	}
	
	if(source.create_spec){

		var specJSON = JSON.parse(source.create_spec);
		for (var subKey in specJSON) {

			if(subKey != "resources" ){
				if(subKey == "name"){

					target["provider_name"] = specJSON[subKey]+"";
				} else if(subKey == "type") {

					target["provider_type"] = specJSON[subKey]+"";
				} else if(specJSON[subKey] != null) {

					var field = specJSON[subKey];
					target[subKey] =  (field.constructor === Object || field.constructor === Array) ? this.appUtil.stringify(field) : field+"";
				}
			}

			if(subKey == "resources" ){
				this.logger.debug ("out resources Key:field  " + specJSON[subKey]);
				var resourceJSON = specJSON[subKey];
				for (var innerKey in resourceJSON){

					this.logger.debug ("Inside resources Key:field  " + innerKey+":"+resourceJSON[innerKey]);
					if(innerKey == "type"){

						target["specific_provider_type"] = resourceJSON[innerKey]+"";
					} else {

						var field = resourceJSON[innerKey];
						this.logger.debug ("Inside 2nd resources Key:field  " + innerKey+":"+field+"");
						target[innerKey] =  (field.constructor === Object || field.constructor === Array) ? this.appUtil.stringify(field) : field+"";
					}
				}
			}
		}
	}

})(source, target, map, log, action==="update");]]></script>
        <source_table>x_nuta2_nutanix_ca_staging_vmware</source_table>
        <sys_class_name>sys_transform_map</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-12-30 23:58:11</sys_created_on>
        <sys_id>165b6648db32230075f47dda8c96193a</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>VMware Providers</sys_name>
        <sys_package display_value="Nutanix Calm" source="x_nuta2_nutanix_ca">3b7631654f452b001200e5201310c76b</sys_package>
        <sys_policy/>
        <sys_scope display_value="Nutanix Calm">3b7631654f452b001200e5201310c76b</sys_scope>
        <sys_update_name>sys_transform_map_165b6648db32230075f47dda8c96193a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-05-02 11:10:40</sys_updated_on>
        <target_table>x_nuta2_nutanix_ca_vmware</target_table>
    </sys_transform_map>
</record_update>
